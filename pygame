import pygame
#pygame set up
screen = WIDTH, HEIGHT = 1280, 720
fps = 60
pygame.init()

# paddle settings
paddle_width = 200
paddle_height = 18
paddle_speed = 15
paddle = pygame.Rect(WIDTH // 2- paddle_width // 2, HEIGHT-paddle_height-10, paddle_width, paddle_height)

#ball settings
from random import randrange as rnd
ball_radius = 12
ball_speed = 4
ball_rect = int(ball_radius * 2 ** 0.5)
ball = pygame.Rect(rnd (ball_rect, WIDTH - ball_rect), HEIGHT // 2, ball_rect, ball_rect)
dx, dy = 1, -1

# block settings
block_list = [pygame.Rect(10 + 130 * i, 10 + 70 * j, 108, 50) for i in range(10) for j in range(5)]
color_list = [(rnd (32, 256), rnd (32, 256), rnd (32, 256)) for i in range(10) for j in range(5)]

screen = pygame.display.set_mode((1280, 720))
clock = pygame.time.Clock()

#background image in the screen  
bg_img = pygame.image.load('sky_night_tree.jpg')

def detect_collision (dx, dy, ball, rect):
    if dx > 0:
        delta_x = ball.right - rect.left
    else:
        delta_x = rect.right - ball.left
    if dy > 0:
        delta_y = ball.bottom - rect.top
    else:
        delta_y = rect.bottom - ball.top

    if abs(delta_x - delta_y) < 10:
        dx, dy = -dx, -dy
    elif delta_x > delta_y:
        dy = -dy
    elif delta_y > delta_x:
        dx = -dx
    return dx, dy

running = True

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            exit()
         
    # fill the screen with a color to wipe away anything from last frame
    screen.fill("black")
    screen.blit(bg_img, (0,0))
    pygame.mixer.music.stop()
    pop_sound = pygame.mixer.Sound ('pop.mp3')  


    
    # drawing world
    [pygame.draw.rect(screen, color_list[color], block) for color, block in enumerate(block_list)]  
    pygame.draw.rect(screen, pygame.Color('white'), paddle)
    pygame.draw.circle(screen, pygame.Color('purple'), ball.center, ball_radius)

    # ball movement
    ball.x += ball_speed * dx
    ball.y += ball_speed * dy

    # collision left right
    if ball.centerx < ball_radius or ball.centerx > WIDTH - ball_radius:
        dx = -dx

    # control top
    if ball.centery < ball_radius:
        dy = -dy

    # collision paddle
    if ball.colliderect(paddle) and dy > 0:
        dx, dy = detect_collision (dx, dy, ball, paddle)

    # collision blocks 
    hit_index = ball.collidelist(block_list)
    if hit_index != -1:
        pop_sound.play()
        hit_rect = block_list.pop(hit_index)
        hit_color = color_list.pop(hit_index)
        dx, dy = detect_collision(dx, dy, ball, hit_rect)
    # special effect
        hit_rect.inflate_ip(ball.width * 3, ball.height * 3)
        pygame.draw.rect(screen, hit_color, hit_rect)
        fps += 2

    # win, game over
    if ball.bottom > HEIGHT:
        print ('GAME OVER!')
        exit()
    elif not len(block_list):
        print ('WIN!')
        exit()

    # control
    key = pygame.key.get_pressed()
    if key [pygame.K_LEFT] and paddle.left > 0:
        paddle.left -= paddle_speed

    if key [pygame.K_RIGHT] and paddle.right < WIDTH:
       paddle.right += paddle_speed  

    # flip() the display to put your work on screen
    pygame.display.flip()

    clock.tick(60)  # limits FPS to 60

pygame.display.update()
pygame.quit()